import re

from typing import Set
from pathlib import Path
from distutils.version import LooseVersion

from mgtool.core.grep import Grep


class GrepVuln(Grep):

    def __init__(self, bin_path: Path, debug: bool = False):
        super().__init__(bin_path, debug)
        self.possible_version_strings: Set[str] = set()

    def prepare(self):
        self.search_version_in_show()

    def collect_version_major_1(self, related_strings: Set[str]):
        for related_string in related_strings:
            matched_regex = re.search(r"^lighttpd/1.(\d).(\d+)", related_string)
            if matched_regex:
                self.possible_version_strings.add(matched_regex.group())

    def search_version_in_show(self):
        if "show_version" in self.name_addr_map.keys():
            func_ea = self.name_addr_map["show_version"]
            _, related_strings = self.get_callee_and_strings(func_ea)
            self.collect_version_major_1(related_strings)
        if "show_help" in self.name_addr_map.keys():
            func_ea = self.name_addr_map["show_help"]
            _, related_strings = self.get_callee_and_strings(func_ea)
            self.collect_version_major_1(related_strings)
        if "config_insert" in self.name_addr_map.keys():
            func_ea = self.name_addr_map["config_insert"]
            _, related_strings = self.get_callee_and_strings(func_ea)
            self.collect_version_major_1(related_strings)


    def do_grep(self, debug: bool):
        for possible_version_string in self.possible_version_strings:
            if LooseVersion(possible_version_string) >= LooseVersion("lighttpd/1.4.51"):
                return False
        return True